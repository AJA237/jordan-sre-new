# cloudbuild.yaml
steps:
# Step 1: Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
    - 'build'
    - '-t'
    - 'us-central1-docker.pkg.dev/${PROJECT_ID}/sre-training-repo/my-flask-app:${_GIT_TAG}'
    - '.'

# Step 2: Push the Docker image to Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
    - 'push'
    - 'us-central1-docker.pkg.dev/${PROJECT_ID}/sre-training-repo/my-flask-app:${_GIT_TAG}'

# Step 3: Get GKE credentials and save them to the shared workspace
- name: 'gcr.io/cloud-builders/gcloud'
  id: Get GKE Credentials
  args:
    - 'container'
    - 'clusters'
    - 'get-credentials'
    - 'sre-training-cluster'
    - '--region=us-central1'
    - '--project=${PROJECT_ID}'
  env:
    - 'KUBECONFIG=/workspace/kubeconfig'

# Step 4: Deploy to GKE using the credentials from the shared workspace
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy to GKE
  args:
    - 'set'
    - 'image'
    - 'deployment/my-flask-app-deployment'
    - 'my-flask-app-container=us-central1-docker.pkg.dev/${PROJECT_ID}/sre-training-repo/my-flask-app:${_GIT_TAG}'
  env:
    - 'KUBECONFIG=/workspace/kubeconfig'
    - 'CLOUDSDK_COMPUTE_ZONE=us-central1'

# Substitutions allow dynamic values
substitutions:
  _GIT_TAG: 'latest'

# Logging option to fix service account permission errors
options:
  logging: CLOUD_LOGGING_ONLY
